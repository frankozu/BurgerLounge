Team Members: I am on my own (no team) since no one answered my message in Canvas.
    - Team Members: Franko (frankozu)
    - GitHub Repository: https://github.com/frankozu/BurgerLounge

Development Environment:
    - OS: Ubuntu
    - Editor: Visual Studio Code
    - Version Control: GitHub repository
    - Environment: Using Python virtual environment.

Git Setup:
    - The repository name is BurgerLounge.
    - Added a description of the project in README.md.

Planning:
    - Created the Planning directory for Goods.
    - Created text files for hamburgers, drinks, and condiments using mkdir and touch. No challenges were faced.

Reflections Directory:
    - Created the Reflections directory for the engineering diary.

Flask and Initial Setup:
    - Installed Flask and set up a Python virtual environment for the project.
    - Set up initial Flask app (app.py), created routes for /menu (GET) and /order (POST).

Configuration Management:
    - Wrote a summary about what configuration management is and why it is used.

Git Workflow:
    - Wrote a summary about the most common git workflow and commands used.

Setting up Flask Application:
    - Set up the BurgerOrderer module using Flask.
    - Created the app.py file and added routes for:
        - /menu (GET) – retrieves data from MenuStore (SQLite database) and returns it as JSON.
        - /order (POST) – accepts customer orders as JSON, logs the request, and returns the order confirmation.
    - Configured a SQLite database connection to retrieve data for burgers, condiments, and drinks.
    Challenges:
        - Initially, Flask wasn’t starting due to a missing app.run() statement. Adding this fixed the issue.
        - Encountered “connection refused” errors when testing the POST request using curl. Resolved this by ensuring Flask was running on the correct IP and port, and by running curl in a separate terminal.
    What I learned:
        - Importance of logging in Flask to track incoming requests.
        - Using curl to test API endpoints and debug network issues.
        - Flask’s 0.0.0.0 binding allows it to listen on all network interfaces.

Containerization and Testing API:
    - Set up Docker containers for BurgerOrderer and connected it with the MenuStore database.
    - Tested API routes using curl and a browser to verify connectivity.
    - Ensured that the /order POST route accepts and processes requests correctly.
    Challenges:
        - Had issues with getting the POST request to work through curl, but after adjusting network setup and testing, the problem was solved.
    What I learned:
        - Containerization with Docker simplifies service management.
        - Importance of testing API endpoints from both local machines and external tools (like Postman).
        - Regular commits allow tracking progress and troubleshooting issues.

JSON management:
    - The /menu route is functioning and returns a JSON response with the menu items.
    - The /order route is functioning and processes customer orders via POST requests.
    - Logging has been added to track incoming orders and JSON payloads.
    - Flask is running smoothly, and I am testing using both curl and a browser.